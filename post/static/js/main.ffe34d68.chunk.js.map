{"version":3,"sources":["components/WildlyArrogant/theme.ts","components/WildlyArrogant/TextImage/utils.ts","components/WildlyArrogant/TextImage/TextImage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ThemeType","themeNames","themeColors","ThemeTypeNames","TextPainter","text","canvasContext","themeSetting","themeStyle","this","applyThemeSetting","themeType","type","themeColor","color","WhiteText","textColor","borderColor","backgroundColor","BlackText","BlackBackgroundWhiteText","WhiteBackgroundBlackText","BlackBackground","textBaseline","fillStyle","fillRect","lineWidth","strokeStyle","strokeRect","font","globalAlpha","fillText","name","fontSize","textLines","split","breakedTextLines","maxTextLineWidthOnCanvas","textLine","textLineWidthOnCanvas","measureText","width","TEXT_IMAGE_WIDTH","newTextLine","textChar","newTextLineWidthOnCanvas","Math","max","push","lineHeight","paddingTop","length","paddingLeft","style","textLineStartPosition","x","y","breakedTextLinesWithStyle","getBreakedTextLinesWithStyleByFontSize","paintThemeTemplate","paintTextByTextLinesAndStyle","TextImage","onRender","canvasRef","useRef","imageRef","themeNameIndex","indexOf","themeName","useEffect","current","canvas","image","getContext","paintText","src","toDataURL","ref","height","display","alt","margin","maxWidth","App","useState","messageThemeType","setMessageThemeType","messageThemeIndex","setMessageThemeIndex","messageText","setMessageText","messageImageUrl","setMessageImageUrl","facebookPostId","isCreatingPost","setPostState","setIsCreatingPost","messageThemeName","WildlyArrogant","headerStyle","handleSubmit","a","chooseThemeColorStyle","createPost","formData","FormData","append","Axios","post","response","data","status","postId","message","timeRemains","setTimeout","alignItems","justifyContent","flexDirection","id","className","marginTop","floor","window","innerWidth","title","border","overflow","scrolling","frameBorder","allowTransparency","value","placeholder","onChange","event","target","map","themeIndex","opacity","key","onClick","themeTypeName","imageUrl","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.ffe34d68.chunk.js","sourcesContent":["export type ThemeName =\r\n    | \"狂言妄語\"\r\n    | \"甜言蜜語\"\r\n    | \"自言自語\"\r\n    | \"酸言酸語\"\r\n    | \"流言蜚語\"\r\n    | \"胡言亂語\"\r\n    | \"污言穢語\"\r\n    | \"名言勵語\"\r\n    | \"荒言謬語\";\r\n\r\nexport type ThemeColor =\r\n    | \"lightblue\"\r\n    | \"hotpink\"\r\n    | \"lightgray\"\r\n    | \"mediumslateblue\"\r\n    | \"lightsalmon\"\r\n    | \"lightseagreen\"\r\n    | \"crimson\"\r\n    | \"gold\"\r\n    | \"cornflowerblue\";\r\n\r\nexport const themeNames: ThemeName[] = [\r\n    \"狂言妄語\",\r\n    \"甜言蜜語\",\r\n    \"自言自語\",\r\n    \"酸言酸語\",\r\n    \"流言蜚語\",\r\n    \"胡言亂語\",\r\n    \"污言穢語\",\r\n    \"名言勵語\",\r\n    \"荒言謬語\",\r\n];\r\n\r\nexport const themeColors: ThemeColor[] = [\r\n    \"lightblue\",\r\n    \"hotpink\",\r\n    \"lightgray\",\r\n    \"mediumslateblue\",\r\n    \"lightsalmon\",\r\n    \"lightseagreen\",\r\n    \"crimson\",\r\n    \"gold\",\r\n    \"cornflowerblue\",\r\n];\r\n\r\nexport enum ThemeType {\r\n    BlackBackground,\r\n    WhiteText,\r\n    BlackText,\r\n    BlackBackgroundWhiteText,\r\n    WhiteBackgroundBlackText,\r\n}\r\n\r\nexport const ThemeTypeNames = [\r\n    \"黑底原色\",\r\n    \"原底白色\",\r\n    \"原底黑色\",\r\n    \"黑底白色\",\r\n    \"白底黑色\",\r\n];\r\n","import { ThemeColor, ThemeType, ThemeName } from \"../theme\";\r\n\r\nexport const TEXT_IMAGE_WIDTH = 500;\r\nexport const TEXT_IMAGE_HEIGHT = 300;\r\nexport const TEXT_IMAGE_BORDER_WIDTH = 10;\r\nexport const AVAILABLE_TEXT_IMAGE_WIDTH = TEXT_IMAGE_WIDTH - TEXT_IMAGE_BORDER_WIDTH * 2;\r\n\r\ninterface ThemeStyle {\r\n    textColor: string;\r\n    borderColor: string;\r\n    backgroundColor: string;\r\n}\r\n\r\ninterface TextLinesWithStyle {\r\n    textLines: string[],\r\n    fontSize: number,\r\n    lineHeight: number,\r\n    paddingTop: number,\r\n    paddingLeft: number,\r\n}\r\n\r\nexport interface ThemeSetting {\r\n    type: ThemeType;\r\n    name: ThemeName;\r\n    color: ThemeColor;\r\n}\r\n\r\nexport class TextPainter {\r\n    public text: string;\r\n    public canvasContext: CanvasRenderingContext2D;\r\n    public themeStyle: ThemeStyle;\r\n    public themeSetting: ThemeSetting;\r\n\r\n    constructor(text: string, canvasContext: CanvasRenderingContext2D, themeSetting: ThemeSetting) {\r\n        this.text = text;\r\n        this.canvasContext = canvasContext;\r\n        this.themeSetting = themeSetting;\r\n        this.themeStyle = this.applyThemeSetting();\r\n    }\r\n\r\n    applyThemeSetting() {\r\n        const { themeSetting: { type: themeType, color: themeColor } } = this;\r\n\r\n        switch (themeType) {\r\n            case ThemeType.WhiteText:\r\n                return this.themeStyle = {\r\n                    textColor: \"#f2f2f2\",\r\n                    borderColor: \"#888888\",\r\n                    backgroundColor: themeColor,\r\n                };\r\n\r\n            case ThemeType.BlackText:\r\n                return this.themeStyle = {\r\n                    textColor: \"#0d0d0d\",\r\n                    borderColor: \"#777777\",\r\n                    backgroundColor: themeColor,\r\n                };\r\n\r\n            case ThemeType.BlackBackgroundWhiteText:\r\n                return this.themeStyle = {\r\n                    textColor: \"#f2f2f2\",\r\n                    borderColor: themeColor,\r\n                    backgroundColor: \" #0d0d0d\",\r\n                };\r\n\r\n            case ThemeType.WhiteBackgroundBlackText:\r\n                return this.themeStyle = {\r\n                    textColor: \"#0d0d0d\",\r\n                    borderColor: themeColor,\r\n                    backgroundColor: \"#f2f2f2\",\r\n                };\r\n\r\n            case ThemeType.BlackBackground:\r\n            default:\r\n                return this.themeStyle = {\r\n                    textColor: themeColor,\r\n                    borderColor: \"#777777\",\r\n                    backgroundColor: \"#0d0d0d\",\r\n                };\r\n        }\r\n    }\r\n\r\n    paintThemeTemplate() {\r\n        const { canvasContext, themeStyle, themeSetting } = this;\r\n        const { textColor, borderColor, backgroundColor } = themeStyle;\r\n        canvasContext.textBaseline = \"middle\";\r\n        canvasContext.fillStyle = backgroundColor;\r\n        canvasContext.fillRect(5, 5, 490, 290);\r\n        canvasContext.lineWidth = 10;\r\n        canvasContext.strokeStyle = borderColor;\r\n        canvasContext.strokeRect(0, 0, 500, 300);\r\n        canvasContext.font = \"20px sens-serif\";\r\n        canvasContext.globalAlpha = 0.8;\r\n        canvasContext.fillStyle = textColor;\r\n        canvasContext.fillText(themeSetting.name, 415, 285);\r\n        canvasContext.globalAlpha = 1;\r\n        canvasContext.font = \"30px sans-serif\";\r\n    }\r\n\r\n    getBreakedTextLinesWithStyleByFontSize(fontSize: number = 30): TextLinesWithStyle {\r\n        const { text, canvasContext } = this;\r\n        const textLines = text.split(\"\\n\");\r\n        const breakedTextLines = [];\r\n        let maxTextLineWidthOnCanvas = 0;\r\n        canvasContext.font = `${fontSize}px sans-serif`;\r\n\r\n        for (let textLine of textLines) {\r\n            const textLineWidthOnCanvas = canvasContext.measureText(textLine).width;\r\n\r\n            if (textLineWidthOnCanvas > AVAILABLE_TEXT_IMAGE_WIDTH) {\r\n                let newTextLine = \"\";\r\n\r\n                for (let textChar of textLine) {\r\n                    const newTextLineWidthOnCanvas = canvasContext.measureText(newTextLine + textChar).width;\r\n\r\n                    if (newTextLineWidthOnCanvas <= AVAILABLE_TEXT_IMAGE_WIDTH) {\r\n                        newTextLine += textChar;\r\n                        maxTextLineWidthOnCanvas = Math.max(newTextLineWidthOnCanvas, maxTextLineWidthOnCanvas);\r\n                    }\r\n                    else {\r\n                        breakedTextLines.push(newTextLine);\r\n                        newTextLine = textChar;\r\n                    }\r\n                }\r\n\r\n                if (newTextLine) {\r\n                    breakedTextLines.push(newTextLine);\r\n                }\r\n            }\r\n            else {\r\n                breakedTextLines.push(textLine);\r\n                maxTextLineWidthOnCanvas = Math.max(textLineWidthOnCanvas, maxTextLineWidthOnCanvas);\r\n            }\r\n        }\r\n\r\n        const lineHeight = fontSize + 5;\r\n        const paddingTop = (TEXT_IMAGE_HEIGHT - (breakedTextLines.length * lineHeight)) / 2 + 2.5;\r\n        const paddingLeft = (TEXT_IMAGE_WIDTH - maxTextLineWidthOnCanvas) / 2;\r\n\r\n        return {\r\n            textLines: breakedTextLines,\r\n            fontSize,\r\n            lineHeight,\r\n            paddingTop,\r\n            paddingLeft,\r\n        };\r\n    }\r\n\r\n    paintTextByTextLinesAndStyle({ textLines, ...style }: TextLinesWithStyle) {\r\n        const { canvasContext } = this;\r\n        const { fontSize, lineHeight, paddingTop, paddingLeft } = style;\r\n\r\n        const textLineStartPosition = {\r\n            x: paddingLeft,\r\n            y: paddingTop + lineHeight / 2,\r\n        };\r\n\r\n        canvasContext.font = `${fontSize}px sans-serif`;\r\n\r\n        for (let textLine of textLines) {\r\n            canvasContext.fillText(textLine, textLineStartPosition.x, textLineStartPosition.y);\r\n            textLineStartPosition.y += fontSize + 5;\r\n        }\r\n    }\r\n\r\n    paintText() {\r\n        const { text } = this;\r\n        const textLines = text.split(\"\\n\");\r\n\r\n        for (let fontSize = 25; fontSize <= 60; fontSize += 5) {\r\n            const breakedTextLinesWithStyle = this.getBreakedTextLinesWithStyleByFontSize(fontSize);\r\n            const breakedTextLines = breakedTextLinesWithStyle.textLines;\r\n\r\n            if (breakedTextLinesWithStyle.paddingTop < fontSize || textLines.length < breakedTextLines.length) {\r\n                const breakedTextLinesWithStyle = this.getBreakedTextLinesWithStyleByFontSize(fontSize - 5);\r\n                this.paintThemeTemplate();\r\n                this.paintTextByTextLinesAndStyle(breakedTextLinesWithStyle);\r\n                return;\r\n            }\r\n        }\r\n\r\n        const breakedTextLinesWithStyle = this.getBreakedTextLinesWithStyleByFontSize(60);\r\n        this.paintThemeTemplate();\r\n        this.paintTextByTextLinesAndStyle(breakedTextLinesWithStyle);\r\n    }\r\n}\r\n","import React, { useRef, RefObject, useEffect } from \"react\";\r\nimport { ThemeColor, ThemeType, themeColors, themeNames } from \"../theme\";\r\nimport { TEXT_IMAGE_WIDTH, TEXT_IMAGE_HEIGHT, TextPainter, ThemeSetting } from \"./utils\";\r\n\r\nexport interface Props {\r\n  text: string;\r\n  themeType: ThemeType;\r\n  themeColor: ThemeColor;\r\n  onRender?: (imageBase64Url: string) => void;\r\n}\r\n\r\nconst TextImage: React.FunctionComponent<Props> = ({ text, themeType, themeColor, onRender }: Props) => {\r\n  const canvasRef = useRef<HTMLCanvasElement>() as RefObject<HTMLCanvasElement>;\r\n  const imageRef = useRef<HTMLImageElement>() as RefObject<HTMLImageElement>;\r\n  const themeNameIndex = themeColors.indexOf(themeColor);\r\n  const themeName = themeNames[themeNameIndex];\r\n\r\n  const canvasStyle = {\r\n    display: \"none\",\r\n  };\r\n\r\n  const imageStyle = {\r\n    display: \"block\",\r\n    margin: \"0 auto\",\r\n    width: \"95%\",\r\n    maxWidth: 500,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!canvasRef.current || !imageRef.current) {\r\n      return;\r\n    }\r\n\r\n    const canvas = canvasRef.current;\r\n    const image = imageRef.current;\r\n    const canvasContext = canvas.getContext(\"2d\");\r\n\r\n    if (!canvasContext) {\r\n      return;\r\n    }\r\n\r\n    const themeSetting: ThemeSetting = {\r\n      type: themeType,\r\n      name: themeName,\r\n      color: themeColor,\r\n    };\r\n\r\n    const textPainter = new TextPainter(text, canvasContext, themeSetting);\r\n    textPainter.paintText();\r\n    image.src = canvas.toDataURL();\r\n    onRender?.(image.src);\r\n  }, [text, canvasRef, imageRef, themeName, themeType, themeColor, onRender]);\r\n\r\n  return (\r\n    <div>\r\n      <canvas ref={canvasRef} width={TEXT_IMAGE_WIDTH} height={TEXT_IMAGE_HEIGHT} style={canvasStyle}></canvas>\r\n      <img ref={imageRef} alt={text} style={imageStyle} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TextImage;\r\n","import React, { useState, useEffect } from \"react\";\nimport Axios from \"axios\";\nimport \"./App.css\";\nimport { WildlyArrogant } from \"./components\";\n\nconst GOOGLE_MARCO_URL = \"https://script.google.com/macros/s/AKfycbxf6RbMgUDvM82LudhJLUdaogyp5yKVVp6rMu8SyE0IE3rWQcej/exec\";\n\nconst App = () => {\n  const [messageThemeType, setMessageThemeType] = useState<WildlyArrogant.ThemeType>(0);\n  const [messageThemeIndex, setMessageThemeIndex] = useState(0);\n  const [messageText, setMessageText] = useState(\"\");\n  const [messageImageUrl, setMessageImageUrl] = useState(\"\");\n  const [{ facebookPostId, isCreatingPost }, setPostState] = useState({ facebookPostId: \"\", isCreatingPost: false });\n  const setIsCreatingPost = (isCreatingPost: boolean) => setPostState({ facebookPostId, isCreatingPost });\n  const messageThemeName = WildlyArrogant.themeNames[messageThemeIndex];\n  const messageThemeColor = WildlyArrogant.themeColors[messageThemeIndex];\n  const headerStyle = { color: messageThemeColor };\n\n  const handleTextareaChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMessageText(event.target.value);\n  };\n\n  const handleTextImageRender = (imageUrl: string) => {\n    setMessageImageUrl(imageUrl);\n  };\n\n  const handleSubmit = async () => {\n    setIsCreatingPost(true);\n  };\n\n  const chooseThemeColorStyle = {\n    maxWidth: WildlyArrogant.themeColors.length * 90,\n  };\n\n  const chooseThemeTypeStyle = {\n    maxWidth: 5 * 90,\n  };\n\n  useEffect(() => {\n    if (!isCreatingPost) {\n      return;\n    }\n\n    const createPost = async () => {\n      const formData = new FormData();\n\n      formData.append(\"text\", messageText);\n      formData.append(\"type\", messageThemeName);\n      formData.append(\"image\", messageImageUrl);\n\n      const response = await Axios.post(GOOGLE_MARCO_URL, formData);\n\n      if (response.data.status !== \"error\") {\n        setPostState({\n          facebookPostId: response.data.postId,\n          isCreatingPost: false,\n        });\n      }\n      else if (response.data.message === \"service unavailable\") {\n        const { timeRemains } = response.data;\n        setTimeout(createPost, timeRemains);\n      }\n    };\n\n    createPost();\n  });\n\n  if (isCreatingPost) {\n    const style = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      flexDirection: \"column\" as \"column\",\n      width: \"100vw\",\n      height: \"100vh\",\n    };\n\n    return (\n      <div style={style}>\n        <div id=\"loading\"></div>\n        <div className=\"blink\" style={{ marginTop: 10 }}>正在建立貼文...</div>\n      </div>\n    );\n  }\n\n  if (facebookPostId) {\n    const width = Math.floor(window.innerWidth * 0.9);\n\n    const style = {\n      display: \"block\",\n      border: \"none\",\n      overflow: \"hidden\",\n      margin: \"0 auto\",\n    };\n\n    return (\n      <iframe\n        title=\"facebook 貼文\"\n        src={`https://www.facebook.com/plugins/post.php?href=https%3A%2F%2Fwww.facebook.com%2FWildly.Arrogant%2Fposts%2F${facebookPostId}%3A0&width=${width}`}\n        width={width}\n        height={width}\n        style={style}\n        scrolling=\"no\"\n        frameBorder=\"0\"\n        allowTransparency={true} />\n    );\n  }\n\n  return (\n    <>\n      <header style={headerStyle}>{messageThemeName}</header>\n      <main>\n        <textarea value={messageText} placeholder=\"你最近最狂的事情是什麼?\" onChange={handleTextareaChange} />\n\n        <ul id=\"choose-theme-color\" className=\"choose\" style={chooseThemeColorStyle}>\n          {WildlyArrogant.themeNames.map((themeName, themeIndex) => {\n            const style = {\n              color: WildlyArrogant.themeColors[themeIndex],\n              opacity: (themeIndex === messageThemeIndex) ? 1 : 0.4,\n            };\n\n            const handleClick = () => setMessageThemeIndex(themeIndex);\n            return <li key={themeIndex} style={style} onClick={handleClick}>{themeName}</li>;\n          })}\n        </ul>\n\n        <ul id=\"choose-theme-type\" className=\"choose\" style={chooseThemeTypeStyle}>\n          {WildlyArrogant.ThemeTypeNames.map((themeTypeName, themeType) => {\n            const style = {\n              opacity: (themeType === messageThemeType) ? 1 : 0.4,\n            };\n\n            const handleClick = () => setMessageThemeType(themeType);\n            return <li key={themeType} style={style} onClick={handleClick}>{themeTypeName}</li>;\n          })}\n        </ul>\n\n        <WildlyArrogant.TextImage\n          text={messageText || \"你最近在狂什麼?\"}\n          themeType={messageThemeType}\n          themeColor={WildlyArrogant.themeColors[messageThemeIndex]}\n          onRender={handleTextImageRender} />\n      </main>\n      <footer>\n        <input type=\"button\" value=\"送出\" onClick={handleSubmit} />\n      </footer>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}